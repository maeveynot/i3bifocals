#!/usr/bin/python3

import sys
import argparse
import json
import asyncio
from i3ipc.aio import Connection
from i3ipc import Event


EVENT_TYPES = (
    Event.WINDOW_FOCUS,
    Event.WINDOW_TITLE,
    # closing last container on workspace
    Event.WINDOW_CLOSE,
    # switching to new empty workspace
    Event.WORKSPACE_FOCUS,
    # changing layout with the keyboard. unfortunately, if layout is modified
    # by something other than a binding, we will not be notified, and will not
    # know until another event or the next i3status tick. perhaps a "layout"
    # event type could be added to the IPC spec.
    Event.BINDING,
)


types = {"workspace": "", "floating_con": "F"}
layouts = {"splith": "H", "splitv": "V", "tabbed": "T", "stacked": "S"}
fallback = "?"


def format_con_name(con):
    if con.type in types:
        return types[con.type]
    if con.nodes:
        return layouts.get(con.layout, fallback)
    return con.name


def format_path_to_con(con, path=None):
    if path is None: path = []

    path.insert(0, format_con_name(con))

    if con.type in ("con", "floating_con"):
        return format_path_to_con(con.parent, path)
    else:
        leaf = path.pop()
        return f"{'' if path else '/'}{'/'.join(path)}{': ' if path else ''}{leaf}"


class i3Bifocals:
    def __init__(self, output):
        self.output = output
        self.status_blocks = []
        self.focused_name = None

    async def print_blocks(self):
        focus_block = {
            "name": "focused_con",
            "full_text": self.focused_name or "-",
        }
        blocks = [focus_block, *self.status_blocks]
        print(json.dumps(blocks, ensure_ascii=False) + ",", flush=True)

    async def update_focus(self, i3, event):
        if event and event.change == "layout":
            cmd, *args = event.binding.command.split()
            if cmd not in ("split", "layout"):
                return
        tree = await i3.get_tree()
        focused = tree.find_focused()
        if self.output:
            p = focused
            while p and p.parent:
                p = p.parent
                if p.type == "output" and p.name != self.output:
                    return
        orig_focused_name = self.focused_name
        self.focused_name = format_path_to_con(focused)
        if self.focused_name != orig_focused_name:
            await self.print_blocks()

    async def subscribe_i3_events(self):
        i3 = await Connection().connect()
        # TODO: We now need to find the active con on our output here; finding
        # the currently focused con across all outputs is no longer useful.
        for e_type in EVENT_TYPES:
            i3.on(e_type, self.update_focus)

    async def exec_status_prog(self, argv):
        status_prog = await asyncio.create_subprocess_exec(*argv, stdout=asyncio.subprocess.PIPE)

        # our input and output must start with two very specific things (see
        # https://i3wm.org/docs/i3bar-protocol.html). verify that the status
        # program sent the same header to us.

        print(json.dumps({"version": 1}, indent=None))
        print("[")

        try:
            header = json.loads(await status_prog.stdout.readline())
        except (json.decoder.JSONDecodeError, ValueError):
            print(f"could not parse JSON header from {argv[0]}! exiting.", file=sys.stderr)
            sys.exit(1)

        if header["version"] != 1:
            print("got an unknown i3bar protocol version! exiting.", file=sys.stderr)
            sys.exit(1)

        array_start = await status_prog.stdout.read(1)
        if array_start != b"[":
            print(f"did not read a body from {argv[0]}! exiting.", file=sys.stderr)
            sys.exit(1)

        # read until we have a full array (which we know ends with a close
        # bracket). it is very unlikely we'll need to do multiple reads between
        # clearing the buffer, since i3status prints one array per line, but if
        # some other compatible program outputs pretty-printed JSON it's possible.

        buf = bytearray()
        while status_prog.returncode is None:
            buf += await status_prog.stdout.readuntil(b"]")
            try:
                s = buf.decode("utf-8").strip("\n,")
                self.status_blocks = json.loads(s)
                await self.print_blocks()
                buf.clear()
            except json.decoder.JSONDecodeError:
                pass


async def gather(*tasks):
    return await asyncio.gather(*tasks)


if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("-o", "--output", type=str, default=None)
    ap.add_argument("status_argv", nargs="*", default=["i3status"])
    args = ap.parse_args()

    try:
        bf = i3Bifocals(args.output)
        watcher = bf.subscribe_i3_events()
        runner = bf.exec_status_prog(args.status_argv)
        asyncio.run(gather(watcher, runner))
    except (KeyboardInterrupt, SystemExit):
        sys.exit(0)
